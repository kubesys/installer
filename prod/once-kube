#! /bin/bash
###############################################
##
##  Copyright (2023, ) Institute of Software
##      Chinese Academy of Sciences
##          wuheng@iscas.ac.cn
##
###############################################


VERSION="0.1.0"

####################
##
## Common
##
####################

aliyun_image_server="registry.cn-hangzhou.aliyuncs.com/google_containers"
coding_file_server="https://g-ubjg5602-generic.pkg.coding.net/iscas-system/files"


#####################
##
## Container
##
#####################

kube_version="1.28.2"
kube_subnet="10.244.0.0/16"


declare -A runtimes
runtimes['runc']='24.0.6'
runtimes['containerd']='1.6.25'
runtimes['docker']='24.0.6'

declare -A pkgMgrs
pkgMgrs['centos']='yum'
pkgMgrs['openEuler']='yum'
pkgMgrs['ubuntu']='apt'

declare -A endpoints
endpoints['runc']='/run/crio/crio.sock'
endpoints['containerd']='/run/containerd/containerd.sock'
endpoints['docker']='/var/run/cri-dockerd.sock'                

###############################################
##
## Do not modify the below codes youself.
## Create a issue if you need new features
## or find a bug
##
###############################################

function get-os()
{
  echo $(cat /etc/os-release  | grep ID | head -1 | awk -F'"' '{print$2}')
}

function get-arch()
{
  if [[ $(arch) == "x86_64" ]]
  then
    echo "amd64"
  elif [[ $(arch) == "aarch64" ]]
  then
    echo "arm64"
  else
    echo "only support x86_64(amd64) and aarch64(arm64)"
    exit 1
  fi
}

function stop-service()
{
  for ser in "$@"
  do
    systemctl daemon-reload
    systemctl stop $ser
    systemctl disable $ser
  done 
}

function start-service()
{
  for ser in "$@"
  do
    systemctl daemon-reload
    systemctl start $ser
    systemctl enable $ser
  done 
}

function restart-service()
{
  for ser in "$@"
  do
    systemctl daemon-reload
    systemctl restart $ser
  done
}


function replace()
{
   sed -ie "s/$1/$2/g" $3
}

function wget-to-local()
{
  wget --no-check-certificate -P $2/ $1
}

function check-kube()
{
   status=`systemctl status kubelet | grep Active | grep running`
   if [[ -z $status ]]
   then
     echo -e "Please install container and Kubernetes first."
     exit
   fi
}

function yum-repo-from-coding()
{
	wget-to-local $coding_file_server/$1?version=$2 /etc/yum.repos.d
    mv /etc/yum.repos.d/$1\?version\=$2 /etc/yum.repos.d/$1
}


function yum-service-from-coding()
{
	wget-to-local $coding_file_server/$1?version=$2 /usr/lib/systemd/system/
    mv /usr/lib/systemd/system/$1\?version\=$2 /etc/yum.repos.d/$1
}

function yum-bin-from-coding()
{
	wget-to-local $coding_file_server/$1-$(arch)?version=$2 /usr/bin/
    mv /usr/lib/systemd/system/$1-$(arch)\?version\=$2 /etc/yum.repos.d/$1
}


###########################################################
##
##  os env
##
###########################################################


function init-osenv()
{
  
  disable-$(get-os)-security
}

## disable security

function disable-centos-security()
{
  replace SELINUX=permissive SELINUX=disabled /etc/selinux/config
  replace SELINUX=enforcing SELINUX=disabled /etc/selinux/config
  stop-service firewalld
}

function disable-ubuntu-security()
{
  sudo ufw disable
}

function disable-openEuler-security()
{
  disable-centos-security
}

###########################################################
##
##  runtime
##
###########################################################

function help-runtime()
{
  cmddesc
  echo -e "Commands:"
  echo -e "  init-runtime runc         :\t(runtime): download runc and cri-o"
  echo -e "  init-runtime containerd   :\t(runtime): download containerd"
  echo -e "  init-runtime docker       :\t(runtime): download docker and cri-docker"
  echo -e "  init-runtime --help       :\t(runtime): help"
}

function init-runtime()
{
  if [[ $# != 2 ]]
  then
     help-runtime
     exit
  fi
 
  osname=$(get-os)
  install=${pkgMgrs[$osname]}

  if [[ -z $install ]];
  then
    unsupport $@
	help-runtime
  fi
  
  
  add-$osname-repository
  $install-$2
}

## add repository

function add-centos-repository()
{
  yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  yum-repo-from-coding kubernetes.repo 23.12
}

function add-openEuler-repository()
{
  yum-repo-from-coding openEuler-docker.repo 23.12
  yum-repo-from-coding kubernetes.repo 23.12
}

# TODO
function add-ubuntu-repository()
{
  arch=`get-arch`

  apt-get install apt-transport-https ca-certificates curl gnupg lsb-release lrzsz -y

  rm -rf /usr/share/keyrings/docker-archive-keyring.gpg
  curl -fsSL $ubuntu_docker_ce_gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  echo  "deb [arch=$arch signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] $ubuntu_docker_ce_url $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  rm -rf /usr/share/keyrings/kubernetes-archive-keyring.gpg
  curl -fsSL $ubuntu_kuberentes_gpg | sudo gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
  echo  "deb [arch=$arch signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] $ubuntu_kuberentes_url kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list > /dev/null

}

function yum-runc()
{
  yum install -y wget cri-o-${runtimes['runc']} lvm2
  config-containerd
}

function config-runc()
{
  start-service crio
  echo "[crio.image]" >> /etc/crio/crio.conf
  echo "pause_image = \"registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.9\"" >> /etc/crio/crio.conf
  restart-service crio
}

function yum-containerd()
{
  yum install -y wget containerd.io-${runtimes['containerd']} kubeadm-${kube_version} lvm2
  config-containerd
}

function config-containerd()
{
  echo "overlay" > /etc/modules-load.d/containerd.conf
  echo "br_netfilter" >> /etc/modules-load.d/containerd.conf
  
  modprobe overlay
  modprobe br_netfilter

  sysctl --system

  containerd config default | sudo tee /etc/containerd/config.toml

  # fix for container v1.6.9
  # sandbox_image = "registry.k8s.io/pause:3.6"
  def_repo="registry.k8s.io"
  real_repo=$(echo "$aliyun_image_server" | sed 's/\//\\\//g')
  # real_repo=${aliyun_image_server/\//\\\/}
  old_version=$(cat /etc/containerd/config.toml | grep $def_repo | awk -F"/" '{print$2}' | awk -F"\"" '{print$1}')
  new_version=$(kubeadm config images list | grep pause | awk -F"/" '{print$2}' | awk -F"\"" '{print$1}')
  
  replace $def_repo $real_repo /etc/containerd/config.toml
  replace $old_version $new_version /etc/containerd/config.toml
  
  start-service containerd
  restart-service containerd
}

function yum-docker()
{
  yum install -y wget docker-ce-${runtimes['docker']}  lvm2
  
  yum-bin-from-coding cri-docker 23.12
  yum-service-from-coding cri-docker.service 23.12
  
  config-docker
}

function config-docker()
{
  ## kubernetes >= 1.22 only supports systemd
  mkdir -p /etc/docker
  echo "{" > /etc/docker/daemon.json
  echo "  \"exec-opts\": [\"native.cgroupdriver=systemd\"]" >> /etc/docker/daemon.json
  echo "}" >> /etc/docker/daemon.json
  systemctl daemon-reload

  start-service docker cri-dockerd
}

###########################################################
##
##  compute
##
###########################################################

function help-compute()
{
  cmddesc
  echo -e "Commands:"
  echo -e "  init-compute kubernetes   :\t(compute): download kubernetes"
  echo -e "  init-compute --help       :\t(compute): help"
}


function init-compute()
{
  if [[ $# != 2 ]]
  then
     help-compute
     exit
  fi
 
  osname=$(get-os)
  
  setup-$(get-os)-kubernetes
}

function setup-centos-kubernetes()
{
  yum install -y kubeadm-${kube_version}

  echo "KUBELET_EXTRA_ARGS=--cgroup-driver=systemd" > /etc/default/kubelet
  
  swapoff -a
  echo "1" > /proc/sys/net/bridge/bridge-nf-call-iptables
  echo "1" > /proc/sys/net/ipv4/ip_forward
  
  start-service kubelet
  
  curl -fL "https://g-ubjg5602-generic.pkg.coding.net/iscas-system/files/kubeadm.yaml?version=23.12" -o /etc/kubernetes/kubeadm.yaml
  replace "#ENDPOINT#" $(echo "${endpoints[$kube_runtime]}" | sed 's/\//\\\//g') /etc/kubernetes/kubeadm.yaml
  replace "#SUBNET#" $(echo "$kube_subnet" | sed 's/\//\\\//g') /etc/kubernetes/kubeadm.yaml
  replace "#VERSION#" $kube_version /etc/kubernetes/kubeadm.yaml
  replace "#REPO#" $(echo "$aliyun_image_server" | sed 's/\//\\\//g') /etc/kubernetes/kubeadm.yaml

  # [required], see https://kubernetes.io/docs/reference/config-api/kubeadm-config.v1beta2/
  kubeadm init --config /etc/kubernetes/kubeadm.yaml
  rm -rf $HOME/.kube
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
  iptables -P FORWARD ACCEPT
}

function setup-openEuler-kubernetes()
{
  setup-centos-kubernetes
}



###########################################################
##
##  help
##
##########################################################

function unsupport()
{
  echo -n "'$@' is not a valid command, see "
  #for a in "${@:1:$# - 1}"
  #do
  #  echo -n "$a "
  #done
  echo -n "--help"
  echo -e "\n"
}

function cmddesc()
{
  echo -e "Welcome to ONCE-kube ($VERSION), install Kubernetes-based systems from scratch.\n"
}


function help()
{
  cmddesc
  echo -e "Commands:"
  echo -e "  init-osenv           :setup security configuration"
  echo -e "  init-runtime         :setup runc, or containerd, or docker packages"
  echo -e "  init-compute         :setup kubernetes"
  echo -e "  --help               :help"
}

case $1 in
  "init-osenv")
    init-osenv $*
    ;;
  "init-runtime")
    init-runtime $*
    ;;	
  "init-compute")
    init-compute $*
    ;;
  "init-network")
    init-network $*
    ;;
  "--help")
    help
    ;;
  *)
  unsupport $@
  help
  ;;
esac
